[gcode_macro G29]
gcode:
 BED_MESH_CLEAR
 BED_MESH_CALIBRATE
 #Z_OFFSET_APPLY_PROBE
 BED_MESH_PROFILE SAVE=p1
 SAVE_CONFIG NO_RESTART=1
 #BED_MESH_OFFSET X=-20
 #BED_MESH_OFFSET X=140
 #G1 X0 Y430 Z5 F4000
 M420 S1
 #BED_MESH_PROFILE LOAD=p1
 #BED_MESH_OFFSET X=140
 #G28
 #G1 Z296.900
 #G1 Z297

[gcode_macro M420]
gcode:
 {% if params.S == '1' %}
  BED_MESH_PROFILE LOAD=p1
 {% endif %}
 {% if params.S == '0' %}
  BED_MESH_PROFILE REMOVE=p1
 {% endif %}

[gcode_macro M218]
gcode:
 {% if params.T =='1' %}
  {% if params.X %}
  SAVE_VARIABLE VARIABLE=tool_offset_x VALUE={params.X|float}
  {% endif %}
  {% if params.Y %}
  SAVE_VARIABLE VARIABLE=tool_offset_y VALUE={params.Y|float}
  {% endif %}
  {% if params.Z %}
  SAVE_VARIABLE VARIABLE=tool_offset_z VALUE={params.Z|float}
  {% endif %}
 {% endif %}
[gcode_macro M500]
gcode:
    SAVE_CONFIG NO_RESTART=1

[gcode_macro M503]
gcode:
 RESPOND TYPE=echo MSG="M218 T1 X{printer.save_variables.variables.tool_offset_x} Y{printer.save_variables.variables.tool_offset_y} Z{printer.save_variables.variables.tool_offset_z}"
 RESPOND TYPE=echo MSG="M851 Z{printer.configfile.config.probe.z_offset}"
 
########################################
# Homing Sequence
########################################

[homing_override]
gcode:
 BED_MESH_CLEAR
 {% if params.X and not params.Y and not params.Z %}
        G28 X
    {% endif %}
    {% if not params.X and params.Y and not params.Z %}
        G28 Y
    {% endif %}
    {% if not params.X and not params.Y and params.Z %}
        G28 Z
        #G91
        #G0 Z-1
        #G91
        #G0 Z1
    {% endif %}    
    {% if params.Y and params.X and not params.Z %}
        G28 Y
        G28 X
    {% endif %}
    {% if not params.X and not params.Y and not params.Z %}
        # G1 Z10 F6 # No need to do this, G28 Z already does it. Move Z up just incase the nozzle is too close to the bed before homing (can be the case in cancelled prints/powercuts/emergency stops)
        G28 Z # Home z, because detector is on the bed, not the nozzle
        G28 Y # Do Y next, to avoid potentially hitting the back of the nozzle wipe.
        G28 X
        #G90
        #G0 Z296
        #G90
        #G0 Z297
    {% endif %}
    {% if params.X and params.Y and params.Z %}
        G28 Z
        G28 Y
        G28 X
    {% endif %}

[gcode_macro M290]
gcode:
 SET_GCODE_OFFSET Z_ADJUST={params.Z|default(0.0)} MOVE=1
 Z_OFFSET_APPLY_PROBE
 SAVE_CONFIG NO_RESTART=1
 
[gcode_macro M851]
gcode:
 {% if params.Z %}
 SET_GCODE_OFFSET Z={params.Z|default(0.0)}
 Z_OFFSET_APPLY_PROBE
 SAVE_CONFIG
 {% endif %}

 
 
[gcode_macro M109]
#rename_existing: M109.1
#default_parameter_S: off
#default_parameter_R: off
#default_parameter_T: -1

variable_tolerance: 4.0


gcode:
    

    {% if params.S %}

        {% if params.T == '0' %}

            SET_HEATER_TEMPERATURE HEATER=extruder TARGET={params.S}
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.S|float - tolerance}

        {% elif params.T == '1'  %}

            SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={params.S}
            TEMPERATURE_WAIT SENSOR=extruder1 MINIMUM={params.S|float - tolerance}

        
        {% else %}
            SET_HEATER_TEMPERATURE HEATER={printer.toolhead.extruder} TARGET={params.S}
            TEMPERATURE_WAIT SENSOR={printer.toolhead.extruder} MINIMUM={params.S|float - tolerance}

        {% endif %}


    {% elif params.R %}

        {% if params.T == '0' %}

            SET_HEATER_TEMPERATURE HEATER=extruder TARGET={params.R}
            TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.R|float - tolerance} MAXIMUM={params.R|float + tolerance}

        {% elif params.T == '1'  %}

            SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET={params.R}
            TEMPERATURE_WAIT SENSOR=extruder1 MINIMUM={params.R|float - tolerance} MAXIMUM={params.R|float + tolerance}


        
        {% else %}
            SET_HEATER_TEMPERATURE HEATER={printer.toolhead.extruder} TARGET={params.R}
            TEMPERATURE_WAIT SENSOR={printer.toolhead.extruder} MINIMUM={params.R|float - tolerance} MAXIMUM={params.R|float + tolerance}

        {% endif %}



    {% else %}

        {% if params.T == '0' %}

            SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0

        {% elif params.T == '1'  %}

            SET_HEATER_TEMPERATURE HEATER=extruder1 TARGET=0

        
        {% else %}
            SET_HEATER_TEMPERATURE HEATER={printer.toolhead.extruder} TARGET=0

        {% endif %}

        
    {% endif %}
    
[gcode_macro M190]
rename_existing: M190.1
#default_parameter_S: off
#default_parameter_R: off
variable_tolerance: 1.0
gcode:
    #RESPOND TYPE=ECHO MSG="TEST"
    {% if params.S %}
        M140 S{params.S}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={params.S|float - tolerance}
    {% elif params.R %}
        M190.1 S{params.R}
    {% else %}
        M140 S0
    {% endif %}
    
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
  # Parameters
    {% set z = params.Z|default(2.5)|int %}                                                   ; z hop amount
    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
        {% if printer.dual_carriage.active_carriage == "CARRIAGE_0" %}
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=activetool VALUE=0                      ;set active tool variable for reference in resume macro
        {% elif printer.dual_carriage.active_carriage == "CARRIAGE_1" %}
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=activetool VALUE=1                      ;set active tool variable for reference in resume macro
        {% endif %}

        SET_FILAMENT_SENSOR SENSOR=switch_sensor_T0 ENABLE=0 ; Put your filament sensor's name after SENSOR=
        SET_FILAMENT_SENSOR SENSOR=encoder_sensor_T0 ENABLE=0
        SET_FILAMENT_SENSOR SENSOR=switch_sensor_T1 ENABLE=0
        SET_FILAMENT_SENSOR SENSOR=encoder_sensor_T1 ENABLE=0                                           ; dissable filament sensor        
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        {% if printer.dual_carriage.active_carriage == "CARRIAGE_0" %}
            G90                                                                              ; absolute positioning
            G1 X-27 Y-112 F9000
        {% elif printer.dual_carriage.active_carriage == "CARRIAGE_1" %}
            G90
            G1 X648 Y-112 F9000
        {% endif %}
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S180                                                                            ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}
    
 
[gcode_macro CLEAN_NOZZLE]
gcode:
  {% if printer.dual_carriage.active_carriage == "CARRIAGE_0" %}
        G90
        G1 X-27 Y-112 F7000
        G1 X12 F7000
        G1 X-27
        G1 X12
        G1 X-27
  {% elif printer.dual_carriage.active_carriage == "CARRIAGE_1" %}
        G90
        G1 X648 Y-79 F7000
        G1 X588 F7000
        G1 X648
        G1 X588
        G1 X648
  {% endif %}
 
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
variable_activetool: 0
gcode:
    # Parameters
    {% set e = params.E|default(5)|int %}                                            ; hotend prime amount (in mm)
    T{activetool}
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=switch_sensor_T0 ENABLE=1                         ; enable filament sensor
        SET_FILAMENT_SENSOR SENSOR=encoder_sensor_T0 ENABLE=1
        SET_FILAMENT_SENSOR SENSOR=switch_sensor_T1 ENABLE=1
        SET_FILAMENT_SENSOR SENSOR=encoder_sensor_T1 ENABLE=1                            ; enable filament sensor
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=150                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 E{e} F600                                                             ; prime nozzle by E, lower Z back down                                            
        {% endif %}
        CLEAN_NOZZLE
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=150                         ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}
    
[filament_switch_sensor switch_sensor_T0]  
switch_pin: ^PF4 
pause_on_runout: True #False 
runout_gcode: 
    #PAUSE  #  [pause_resume] is required in printer.cfg  
    #M117 Filament switch runout on T1
    RESPOND TYPE=echo MSG="Filament Runout or clogged on T0"
    
insert_gcode: 
    RESPOND TYPE=echo MSG="Filament switch inserted on T0" 
[filament_motion_sensor encoder_sensor_T0]  
switch_pin: ^PF3 
detection_length: 2.88 # accuracy of motion sensor 2.88mm 
extruder: extruder  
pause_on_runout: True #False 
runout_gcode: 
    #PAUSE  #  [pause_resume] is required in printer.cfg 
    #M117 Filament encoder runout
    RESPOND TYPE=echo MSG="Filament Runout or clogged on T0"
insert_gcode: 
    RESPOND TYPE=echo MSG="Filament encoder inserted on T0"

[filament_switch_sensor switch_sensor_T1]  
switch_pin: ^PF0 
pause_on_runout: True #False 
runout_gcode: 
    #PAUSE  #  [pause_resume] is required in printer.cfg  
    #M117 Filament switch runout on T1
    RESPOND TYPE=echo MSG="Filament Runout or clogged on T1"
    
insert_gcode: 
    RESPOND TYPE=echo MSG="Filament switch inserted on T1" 
[filament_motion_sensor encoder_sensor_T1]  
switch_pin: ^PC15 
detection_length: 2.88 # accuracy of motion sensor 2.88mm 
extruder: extruder1  
pause_on_runout: True #False 
runout_gcode: 
    #PAUSE  #  [pause_resume] is required in printer.cfg 
    #M117 Filament encoder runout
    RESPOND TYPE=echo MSG="Filament Runout or clogged on T1"
insert_gcode: 
    RESPOND TYPE=echo MSG="Filament encoder inserted on T1"

#[filament_motion_sensor SFS_T0]
# detection_length: 10.00 ; This can be adjusted to your desired level of sensitivity. 10 is a recommended value to prevent flow dropoff false triggers.
# extruder: extruder
# switch_pin: ^PF0
# pause_on_runout: True ; This can be set to false to debug false positives putting the sensor in "monitor mode". The printer will not pause but it will run the runout_gcode below.
# event_delay: 3.0
# pause_delay: 0.5
# runout_gcode:
#     #M117 Runout Detected!
#     RESPOND TYPE=echo MSG="Filament Runout on T0"
    
# [filament_motion_sensor SFS_T1]
# detection_length: 10.00 ; This can be adjusted to your desired level of sensitivity. 10 is a recommended value to prevent flow dropoff false triggers.
# extruder: extruder1
# switch_pin: ^PC15
# pause_on_runout: True ; This can be set to false to debug false positives putting the sensor in "monitor mode". The printer will not pause but it will run the runout_gcode below.
# event_delay: 3.0
# pause_delay: 0.5
# runout_gcode:
#     #M117 Runout Detected!
#     RESPOND TYPE=echo MSG="Filament Runout on T1"

[delayed_gcode DISABLEFILAMENTSENSOR] ; This will disable the SFS 1 second after klipper starts
initial_duration: 1
gcode:
    SET_FILAMENT_SENSOR SENSOR=switch_sensor_T0 ENABLE=0 ; Put your filament sensor's name after SENSOR=
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor_T0 ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=switch_sensor_T1 ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor_T1 ENABLE=0

[gcode_macro SFS_ENABLE] ; Add this to PRINT_START
description: Enable smart filament sensor
gcode:
    #M117 #ENABLING the Smart Filament Sensor
    G92 E0
    SET_FILAMENT_SENSOR SENSOR=switch_sensor_T0 ENABLE=1 ; Put your filament sensor's name after SENSOR=
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor_T0 ENABLE=1
    SET_FILAMENT_SENSOR SENSOR=switch_sensor_T1 ENABLE=1
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor_T1 ENABLE=1

[gcode_macro SFS_DISABLE] ; Add this to PRINT_END and PRINT_CANCEL
description: Disable smart filament sensor
gcode:
    #M117 #DISABLING the Smart Filament Sensor
    G92 E0
    SET_FILAMENT_SENSOR SENSOR=switch_sensor_T0 ENABLE=0 ; Put your filament sensor's name after SENSOR=
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor_T0 ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=switch_sensor_T1 ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor_T1 ENABLE=0
    
###################################################################
####################Start for Door lock####################
################################################################

[output_pin door_lock_pin]
pin: PA5
pwm: False
value: 0
shutdown_value : 0

[gcode_macro DoorToggle]
gcode:
    {% if printer.save_variables.variables.door_status == 1 %}
        M514 S0
    {% elif printer.save_variables.variables.door_status == 0 %}
        M514 S1
    {% endif %}

[gcode_macro M514]
gcode:
    {% if params.S == '0' %}
        SET_PIN PIN=door_lock_pin VALUE=0
        RESPOND TYPE=echo MSG="Door Open"
        SAVE_VARIABLE VARIABLE=door_status VALUE=0
    {% endif %}
    
    {% if params.S == '1' %}
        SET_PIN PIN=door_lock_pin VALUE=1
        RESPOND TYPE=echo MSG="Door Closed"
        SAVE_VARIABLE VARIABLE=door_status VALUE=1
    {% endif %}


###################################################################
##################################################################
####################End############################################

[gcode_macro Door_Status]
gcode:
 RESPOND TYPE=echo MSG="{printer.save_variables.variables.door_status}"
 
#[gcode_macro M114]
#rename_existing: M114.1
#gcode:
#    GET_POSITION
    
    
    
[gcode_macro M114]
rename_existing: M114.1
gcode:
    #RESPOND TYPE=echo MSG="Count {printer.gcode_move.gcode_position}"
    RESPOND TYPE=echo MSG="Count {printer.gcode_move.gcode_position}"